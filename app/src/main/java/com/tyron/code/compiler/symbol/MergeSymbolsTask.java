package com.tyron.code.compiler.symbol;

import android.util.Log;

import com.google.common.base.Preconditions;
import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;
import com.tyron.code.compiler.Task;
import com.tyron.code.compiler.resource.AAPT2Compiler;
import com.tyron.code.model.Project;
import com.tyron.code.service.ILogger;
import com.tyron.code.util.exception.CompilationFailedException;

import java.io.File;
import java.io.IOException;
import java.util.Collection;

/**
 * Class that loads R.txt files generated by AAPT/AAPT2  and converts them
 * to R.java class files
 */
public class MergeSymbolsTask extends Task {

    private File mSymbolOutputDir;
    private File mFullResourceFile;
    private Project mProject;
    private ILogger mLogger;

    @Override
    public String getName() {
        return "SymbolProcessor";
    }

    @Override
    public void prepare(Project project, ILogger logger) throws IOException {
        mProject = project;
        mLogger = logger;
        mSymbolOutputDir = new File(project.getBuildDirectory(), "gen");
        mFullResourceFile = new File(project.getBuildDirectory(), "bin/res/R.txt");
    }

    @Override
    public void run() throws IOException, CompilationFailedException {

        long start = System.currentTimeMillis();
        
        SymbolLoader fullSymbolValues = null;
        Multimap<String, SymbolLoader> libMap = ArrayListMultimap.create();

        for (File library : mProject.getLibraries()) {
            File parent = library.getParentFile();
            Preconditions.checkNotNull(parent, "Unable to access parent directory for " + library);

            String packageName = AAPT2Compiler.getPackageName(new File(parent, "AndroidManifest.xml"));
            if (packageName == null) {
                continue;
            }

            if (packageName.equals(mProject.getPackageName())) {
                // only generate libraries
                continue;
            }

            File rFile = new File(parent, "R.txt");
            if (!rFile.exists()) {
                continue;
            }

            if (fullSymbolValues == null) {
                fullSymbolValues = new SymbolLoader(mFullResourceFile, mLogger);
                fullSymbolValues.load();
            }
            SymbolLoader libSymbols = new SymbolLoader(rFile, mLogger);
            libSymbols.load();

            libMap.put(packageName, libSymbols);
        }

        // now loop on all the package name, merge all the symbols to write, and write them
        for (String packageName : libMap.keySet()) {
            Collection<SymbolLoader> symbols = libMap.get(packageName);

            SymbolWriter writer = new SymbolWriter(mSymbolOutputDir.getAbsolutePath(), packageName,
                    fullSymbolValues);
            for (SymbolLoader loader : symbols) {
                writer.addSymbolsToWrite(loader);
            }
            writer.write();
        }

        Log.d("SymbolProcessor", "Generating symbols took " + (System.currentTimeMillis() - start) + " ms");
    }
}
